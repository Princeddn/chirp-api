name: Ingest uplink to data-backup

on:
  repository_dispatch:
    types: [uplink]
  workflow_dispatch:
    inputs:
      json:
        description: "Uplink JSON (objet)"
        required: true
        default: '{"id":"demo","timestamp":"2025-08-24 12:00:00 CEST"}'

permissions:
  contents: write

concurrency:
  group: ingest
  cancel-in-progress: false

jobs:
  append:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout data-backup branch
        uses: actions/checkout@v4
        with:
          ref: data-backup

      - name: Ensure database.json exists
        run: |
          [ -f database.json ] || echo "[]" > database.json

      - name: Merge payload into database.json (dedupe by id)
        run: |
          python - <<'PY'
          import json, os, pathlib
          p = pathlib.Path("database.json")
          try:
              data = json.loads(p.read_text(encoding="utf-8"))
              if not isinstance(data, list): data = []
          except Exception:
              data = []
          if os.environ.get("GITHUB_EVENT_NAME") == "repository_dispatch":
              payload = json.loads(os.environ["PAYLOAD"])
          else:
              payload = json.loads(os.environ["WF_INPUT_JSON"])
          ids = {d.get("id") for d in data if isinstance(d, dict)}
          if payload.get("id") not in ids:
              data.append(payload)
              p.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
              print("added")
          else:
              print("duplicate, skipped")
          PY
        env:
          PAYLOAD: ${{ toJson(github.event.client_payload) }}
          WF_INPUT_JSON: ${{ inputs.json }}

      - name: Commit & push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: data-backup
          commit_message: "ingest: ${{ github.event.client_payload.id || inputs.json }}"
